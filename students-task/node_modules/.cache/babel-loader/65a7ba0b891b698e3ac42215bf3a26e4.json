{"ast":null,"code":"import _defineProperty from \"/home/miqayel/students-task/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ls from 'local-storage';\nconst initialState = {\n  studentList: []\n};\nexport default function addNewStudent(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_NEW_STUDENT':\n      state = _objectSpread({}, state, {\n        studentList: state.studentList.concat(action.payload)\n      });\n      ls.set('student', JSON.stringify(state.studentList));\n      break;\n\n    case 'UPDATE_STUDENT':\n      const student = action.payload;\n      const updateStudent = state.studentList[student.id];\n      updateStudent.name = student.name;\n      updateStudent.age = student.age;\n      updateStudent.prog = student.prog;\n      break;\n\n    case 'DELETE_STUDENT':\n      state = _objectSpread({}, state, {\n        studentList: state.studentList.filter((x, i) => action.payload.id !== x.id)\n      });\n      let myStudents = JSON.parse(ls.get('student'));\n      let newStudentArray = myStudents.filter((x, i) => action.payload.id !== x.id);\n      break;\n\n    default:\n      state = _objectSpread({}, state);\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/miqayel/students-task/src/redusers/addNewStudent.js"],"names":["ls","initialState","studentList","addNewStudent","state","action","type","concat","payload","set","JSON","stringify","student","updateStudent","id","name","age","prog","filter","x","i","myStudents","parse","get","newStudentArray"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,eAAf;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB;AAIA,eAAe,SAASC,aAAT,CAAuBC,KAAK,GAAGH,YAA/B,EAA6CI,MAA7C,EAAoD;AAC/D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACIF,MAAAA,KAAK,qBACEA,KADF;AAEDF,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBK,MAAlB,CAAyBF,MAAM,CAACG,OAAhC;AAFZ,QAAL;AAIAR,MAAAA,EAAE,CAACS,GAAH,CAAO,SAAP,EAAkBC,IAAI,CAACC,SAAL,CAAeP,KAAK,CAACF,WAArB,CAAlB;AAEA;;AACJ,SAAK,gBAAL;AACI,YAAMU,OAAO,GAAGP,MAAM,CAACG,OAAvB;AACA,YAAMK,aAAa,GAAGT,KAAK,CAACF,WAAN,CAAkBU,OAAO,CAACE,EAA1B,CAAtB;AACAD,MAAAA,aAAa,CAACE,IAAd,GAAqBH,OAAO,CAACG,IAA7B;AACAF,MAAAA,aAAa,CAACG,GAAd,GAAoBJ,OAAO,CAACI,GAA5B;AACAH,MAAAA,aAAa,CAACI,IAAd,GAAqBL,OAAO,CAACK,IAA7B;AACA;;AACJ,SAAK,gBAAL;AACIb,MAAAA,KAAK,qBACEA,KADF;AAEDF,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBgB,MAAlB,CAAyB,CAACC,CAAD,EAAGC,CAAH,KAASf,MAAM,CAACG,OAAP,CAAeM,EAAf,KAAuBK,CAAC,CAACL,EAA3D;AAFZ,QAAL;AAIA,UAAIO,UAAU,GAAGX,IAAI,CAACY,KAAL,CAAWtB,EAAE,CAACuB,GAAH,CAAO,SAAP,CAAX,CAAjB;AACA,UAAIC,eAAe,GAAGH,UAAU,CAACH,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUf,MAAM,CAACG,OAAP,CAAeM,EAAf,KAAsBK,CAAC,CAACL,EAApD,CAAtB;AACA;;AACJ;AACAV,MAAAA,KAAK,qBAAOA,KAAP,CAAL;AAzBJ;;AA4BA,SAAOA,KAAP;AACH","sourcesContent":["import ls from 'local-storage';\n\nconst initialState = {\n    studentList: []\n};\n\nexport default function addNewStudent(state = initialState, action){\n    switch(action.type){\n        case 'ADD_NEW_STUDENT':\n            state = {\n                ...state,\n                studentList: state.studentList.concat(action.payload)\n            }\n            ls.set('student', JSON.stringify(state.studentList));\n\n            break;\n        case 'UPDATE_STUDENT' :\n            const student = action.payload\n            const updateStudent = state.studentList[student.id];\n            updateStudent.name = student.name;\n            updateStudent.age = student.age;\n            updateStudent.prog = student.prog;\n            break;\n        case 'DELETE_STUDENT' :\n            state = {\n                ...state,\n                studentList: state.studentList.filter((x,i) => action.payload.id !==  x.id)\n            }\n            let myStudents = JSON.parse(ls.get('student'));\n            let newStudentArray = myStudents.filter((x, i) => action.payload.id !== x.id)\n            break;\n        default: \n        state = {...state}\n    }\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}